generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  email      String       @unique
  password   String
  firstName  String
  lastName   String
  role       Role         @default(USER)
  Enrollment Enrollment[]
  Comment    Comment[]
  Payment    Payment[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Teacher {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        Role     @default(TEACHER)
  description String?
  Course      Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

enum Role {
  ADMIN
  USER
  TEACHER
}

model Course {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  category     Category
  price        Float?
  teacher      Teacher      @relation(fields: [teacherId], references: [id])
  teacherId    String       @db.ObjectId
  teacherName  String
  teacherLName String
  previewImage String?
  Lesson       Lesson[]
  Enrollment   Enrollment[]
  Rating       Rating[]
  Comment      Comment[]
  Payment      Payment[]
  isPublished  Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
}

enum Category {
  DEVELOPMENT
  MANAGING
  ART
}

model Lesson {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  course       Course         @relation(fields: [courseId], references: [id])
  courseId     String         @db.ObjectId
  contentType  ContentType
  TextContent  TextContent[]
  TestContent  TestContent[]
  VideoContent VideoContent[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
}

enum ContentType {
  TEXT
  TEST
  VIDEO
}

model TextContent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lessonId  String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model TestContent {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  lesson        Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lessonId      String   @db.ObjectId
  question      String
  options       String[]
  correctAnswer Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model VideoContent {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lessonId   String   @db.ObjectId
  videoTitle String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Enrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String   @db.ObjectId
  completed Boolean  @default(false)
  Rating    Rating[]
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Rating {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId String     @db.ObjectId
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String     @db.ObjectId
  rating       Int        @default(0)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  amount    Int
  currency  String
  status    String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}
